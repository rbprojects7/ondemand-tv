{"version":3,"sources":["constants/routes.ts","constants/device.ts","constants/apiData.ts","store/reducers/showsReducer.ts","constants/actionTypes.ts","store/reducers/episodeReducer.ts","store/index.ts","store/rootReducer.ts","views/NotFound/index.tsx","serviceWorker.js","selectors/show.selectors.js","selectors/episodeDetail.selectors.js","components/Show/show.helpers.ts","components/Show/show.actions.ts","components/ShowDetail/showDetail.style.ts","components/Grid/index.ts","components/ShowDetail/showDetail.tsx","components/Show/show.style.ts","components/Episode/episodeTable.tsx","components/Episode/episode.actions.ts","components/Episode/MemoizedEpisode.ts","components/Episode/episode.tsx","components/Episode/episode.helpers.ts","components/Show/MemoizedShow.ts","components/Show/show.tsx","components/DetailView/detail.helpers.ts","components/DetailView/detail.actions.ts","components/DetailView/MemoizedDetail.ts","components/DetailView/detail.tsx","index.js"],"names":["routes","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","api","errorFiller","name","summary","image","medium","original","fetchingShowData","undefined","initialState","description","currentShow","state","type","payload","data","episodes","fetchingEpisodes","current","currentEpisode","error","history","createBrowserHistory","configureStore","preloadedState","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","routerMiddleware","thunk","NotFound","Boolean","window","location","hostname","match","getName","createSelector","getSummary","getCoverLinks","items","selectCovers","episode","selectCurrentEpisode","airdate","isShowAvailable","showId","id","addShowDetails","getShow","dispatch","getState","a","async","presentState","axios","get","console","StyledContainer","styled","div","StyledHeader","h2","StyledContent","StyledCoverImageMedium","img","StyledCoverImageLarge","Item","Grid","numberOfColumns","ShowDetail","src","dangerouslySetInnerHTML","__html","GlobalTableStyle","createGlobalStyle","EpisodeTable","isEmpty","season","className","map","key","number","to","addEpisodes","MemoizedEpisode","connect","getEpisodes","memo","useEffect","values","reverse","reduce","episodeList","push","getEpisodeList","episodesInList","itr","MemoizedShow","covers","getShowDetails","params","getEpisodeFromStore","episodesList","Array","isArray","find","getEpisodeDetails","MemoizedDetail","showName","getSeasonEpisode","navigator","serviceWorker","ready","then","registration","unregister","store","render","path","exact","document","getElementById"],"mappings":"6PAAaA,EACY,aADZA,EAEA,yCAFAA,EAGH,gBCHGC,EAEA,QAFAA,EAGA,QAHAA,EAID,QAJCA,EAKD,SALCA,EAMA,SANAA,EAOA,SAGAC,EAAS,CAClBC,QAAQ,eAAD,OAVE,QAUF,KACPC,QAAQ,eAAD,OAAiBH,EAAjB,KACPI,QAAQ,eAAD,OAAiBJ,EAAjB,KACPK,OAAO,eAAD,OAAiBL,EAAjB,KACNM,OAAO,eAAD,OAAiBN,EAAjB,KACNO,QAAQ,eAAD,OAAiBP,EAAjB,KACPQ,QAAQ,eAAD,OAAiBR,EAAjB,KACPS,SAAS,eAAD,OAAiBT,EAAjB,MClBCU,EACF,yBAGEC,EAAc,CACzBC,KAAM,YACNC,QAAS,oHACTC,MAAO,CACLC,OAAQ,mEACRC,SAAU,qEAIDC,EAAmB,CAC9BL,KAAM,aACNC,aAASK,EACTJ,MAAO,ICdHK,EAAe,CACjBP,UAAMM,EACNE,iBAAaF,GAGJG,EAAc,WAAmD,IAAlDC,EAAiD,sEAArCH,GAAqC,yCAApBI,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC3D,OAAQD,GACJ,ICT4B,wBDW5B,ICViC,6BDW7B,OAAO,eAAKD,EAAZ,GAAsBE,EAAQC,MAClC,QACI,OAAOH,IEZbH,EAAe,CACjBO,cAAUR,EACVS,kBAAkB,EAClBC,aAASV,GAGAQ,EAAW,WAAqD,IAApDJ,EAAmD,sEAAtCH,GAAsC,yCAApBI,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC1D,OAAQD,GACJ,IDP+B,2BCS/B,IDRoC,gCCShC,OAAO,eAAKD,EAAZ,CAAmBI,SAAUF,EAAQC,KAAME,kBAAkB,IACjE,IDTgC,4BCU5B,OAAO,eAAKL,EAAZ,CAAmBK,kBAAkB,IACzC,IDToC,gCCUhC,OAAO,eAAKL,EAAZ,CAAmBO,eAAgBL,IACvC,IDVmC,+BCW/B,OAAO,eAAKF,EAAZ,CAAmBQ,MAAON,IAC9B,QACI,OAAOF,ICdNS,EAAUC,cAiBRC,EAfQ,SAACC,GACtB,ICNgCH,EDiBhC,OAXcI,uBCNkBJ,EDOZA,ECPwBK,0BAAgB,CAC5DC,OAAQC,YAAcP,GACtBV,cACAK,cDKEQ,EACAK,8BACEC,0BACEC,YAAiBV,GACjBW,QEdKC,EAAW,kBAAO,sECUXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBOC,EAAUC,aAAe,SAAA7B,GAAW,OAAIA,GAAeA,EAAYT,QAAM,SAAAA,GAAI,OAAIA,KAEjFuC,EAAaD,aACtB,SAAA7B,GAAW,OAAIA,GAAeA,EAAYR,WAC1C,SAAAA,GAAO,OAAIA,KAGFuC,EAAgBF,aACzB,SAAA7B,GAAW,OAAIA,GAAeA,EAAYP,SAC1C,SAAAuC,GAAK,MAAK,CACNrC,SAAUqC,GAASA,EAAMrC,SACzBD,OAAQsC,GAASA,EAAMtC,WCVlBuC,EAAeJ,aAC1B,SAAAxB,GAAQ,OAAIA,EAASG,kBACrB,SAAA0B,GAAO,MAAK,CACVvC,SAAWuC,GAAWA,EAAQzC,OAASyC,EAAQzC,MAAME,UAAaL,EAAYG,MAAME,SACpFD,OAASwC,GAAWA,EAAQzC,OAASyC,EAAQzC,MAAMC,QAAWJ,EAAYG,MAAMC,WAIvEyC,EAAuBN,aAClC,SAAAxB,GAAQ,OAAIA,EAASG,kBACrB,SAAC0B,GACC,OAAKA,EAEE,CACL3C,KAAM2C,EAAQ3C,KACdC,QAAS0C,EAAQ1C,SAAWF,EAAYE,QACxC4C,QAASF,EAAQE,SALE,Q,kCCdZC,EAAkB,SAACC,EAAgBtC,GAAjB,OAAiCA,EAAYuC,KAAOD,GCK7EE,EAAiB,SAACpC,GAAD,MAAW,CAAEF,KTLA,wBSK4BC,QAAS,CAAEC,UAI9DqC,EAAU,SAACF,GAAD,OAAgB,SAAOG,EAAoBC,GAA3B,qBAAAC,EAAAC,OAAA,qDAC7BC,EAAeH,KADc,qBAGvB3C,EAAgB8C,EAAhB9C,eACWqC,EAAgBE,EAAIvC,GAJR,wDAQnC0C,EAASF,EAAe5C,IARW,oBAAAgD,EAAA,MAURG,IAAMC,IAAN,UAAa3D,EAAb,kBAAkCkD,KAV1B,uBAUvBnC,EAVuB,EAUvBA,KAVuB,kBAWxBsC,EAASF,EAAepC,KAXA,yCAa/B6C,QAAQxC,MAAR,MAb+B,kBAcxBiC,EAhBqB,CAAExC,KTNG,6BSM8BC,QAAS,CAAEC,KAAMd,MAEjD,2D,qwBCNhC,IAAM4D,GAAkBC,IAAOC,IAAV,KAGXzE,GAIJ0E,GAAeF,IAAOG,GAAV,KAKZC,GAAgBJ,IAAOC,IAAV,IAGbxE,EAAOI,QAMPwE,GAAyBL,IAAOM,IAAV,IAG1B7E,EAAOI,QAIH0E,GAAwBP,IAAOM,IAAV,IAGzB7E,EAAOI,Q,iSChCT,IAAM2E,GAAOR,IAAOC,IAAV,MAMJQ,GAAOT,IAAOC,IAAV,MAGX,oBAAGS,gBAAH,kBAAqB,EAArB,KCNOC,GAAa,SAAC,GAAD,IAAGvE,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASE,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,SAA1B,OAAuD,kBAAC,WAAD,KAC7E,kBAACuD,GAAD,KACI,kBAACG,GAAD,KAAe9D,GACf,kBAACqE,GAAD,CAAMC,gBAAiB,GACnB,kBAACF,GAAD,KAGI,kBAACH,GAAD,CAAwBO,IAAKrE,IAG7B,kBAACgE,GAAD,CAAuBK,IAAKpE,KAEhC,kBAACgE,GAAD,KACI,kBAACJ,GAAD,CAAeS,wBAAyB,CAAEC,OAAQzE,U,gqBChB3D,IAAM0E,GAAmBC,YAAH,M,kBCIhBC,GAAe,SAAC,GAAD,IAAG/D,EAAH,EAAGA,SAAUiC,EAAb,EAAaA,OAAb,OAAkD,kBAACY,GAAD,KACzE7C,IAAagE,mBAAQhE,IAAa,kBAACgD,GAAD,eAAsBhD,EAAS,GAAGiE,QACrE,+BACI,+BACI,wBAAIC,UAAU,UACV,sCACA,oCACA,qCAEHC,eAAInE,GAAU,SAAA6B,GAAO,OAClB,wBAAIuC,IAAKvC,EAAQK,IACZL,EAAQwC,QAAU,4BAAKxC,EAAQwC,QAC/BxC,EAAQE,SAAW,4BAAKF,EAAQE,SAChCF,EAAQ3C,MAAQ,4BAAI,kBAAC,KAAD,CAAMoF,GAAE,gBAAWrC,EAAX,qBAA8BJ,EAAQoC,OAAtC,YAAgDpC,EAAQwC,SAAWxC,EAAQ3C,eCbtHqF,GAAc,SAACxE,GAAD,MAAW,CAAEF,KfHM,2BeGyBC,QAAS,CAAEC,UCgB9DyE,GAAkBC,aAPP,SAAC7E,GAErB,MAAO,CACHI,SAFiBJ,EAAbI,aAPe,SAACqC,GAAD,MAA6C,CACpEqC,YAAa,SAACxC,GAAD,OAAcG,GDAHJ,ECA6BC,EDAV,SAAOG,GAAP,iBAAAE,EAAAC,OAAA,uDAC3CH,EAP4B,CAAExC,KfCM,8BeKO,oBAAA0C,EAAA,MAGhBG,IAAMC,IAAN,UAAa3D,EAAb,kBAAkCiD,EAAlC,eAHgB,uBAG/BlC,EAH+B,EAG/BA,KAH+B,kBAIhCsC,EAASkC,GAAYxE,KAJW,uCAMvC6C,QAAQxC,MAAR,MANuC,kBAOhCiC,EATkB,CAAExC,KfJS,gCeI2BC,QAAS,CAAEC,KAAMd,MAEzC,2DAApB,IAACgD,MCYGwC,CAA6CE,gBChBrD,SAAC,GAA+D,IAA7D1C,EAA4D,EAA5DA,OAAQyC,EAAoD,EAApDA,YAAa1E,EAAuC,EAAvCA,SAO3C,OANA4E,qBAAU,WACF3C,GACAyC,EAAYzC,KAEjB,CAACA,EAAQyC,IAEJ,kBAAC,WAAD,KACH1E,GAAYA,EAASA,WACdA,EAASC,kBACVkE,eAAIU,kBCdW,SAAC7E,GAAD,OAAc8E,mBAAQD,kBAAO7E,EAAS+E,QAAO,SAACC,EAAanD,GAKrF,OAJKmD,EAAYnD,EAAQoC,UACrBe,EAAYnD,EAAQoC,QAAU,IAElCe,EAAYnD,EAAQoC,QAAQgB,KAAKpD,GAC1BmD,IACR,MDQuBE,CAAelF,EAASA,YAAY,SAACmF,EAAgBC,GAAjB,OAA0B,kBAAC,GAAD,CAAcnD,OAAQA,EAAQmC,IAAKgB,EAAKpF,SAAUmF,YEY7HE,GAAeZ,aAlBJ,SAAC7E,GAA6B,IAC1CD,EAAgBC,EAAhBD,YAIR,MAAO,CACHT,KAJSqC,EAAQ5B,GAKjBR,QAJYsC,EAAW9B,GAKvB2F,OAJW5D,EAAc/B,OAUN,SAAC0C,GAAD,MAA6C,CACpEkD,eAAgB,SAACrD,GAAD,OAAsBG,EAAcD,EAAQF,QAGpCuC,CAG1BE,gBCzBkB,SAAC,GAA6D,IAA3DW,EAA0D,EAA1DA,OAAQnG,EAAkD,EAAlDA,QAASoG,EAAyC,EAAzCA,eAAgBjE,EAAyB,EAAzBA,MAAOpC,EAAkB,EAAlBA,KACrD+C,EAASX,GAASA,EAAMkE,QAAUlE,EAAMkE,OAAOvD,OAQrD,OANA2C,qBAAU,WACFW,GACAA,EAAetD,KAEpB,CAACsD,EAAgBtD,IAEZ,kBAAC,WAAD,KACJ,kBAAC4B,GAAD,MACA,kBAAC,GAAD,eACI3E,KAAMA,EACNC,QAASA,GACLmG,IAER,kBAACd,GAAD,CAAiBvC,OAAQA,SCrBpBwD,GAAsB,SAAC7F,EAAOqE,EAAQI,GAC/C,IAAMqB,EAAe9F,GAASA,EAAMI,SAC9BA,EAAW0F,GAAgBA,EAAa1F,SAE9C,OAAK2F,MAAMC,QAAQ5F,GAEZA,EAAS6F,MAAK,SAAAhE,GAAO,OAAIA,EAAQoC,SAAYA,EAAS,GAAMpC,EAAQwC,SAAYA,EAAS,KAF3D,MCAnCyB,GAAoB,SAAC/F,GAAD,MAAW,CAAEF,KtBEK,gCsBF+BC,QAASC,ICsBvEgG,GAAiBtB,aATN,SAAC7E,GAA4B,IACzCI,EAA0BJ,EAA1BI,SAAUL,EAAgBC,EAAhBD,YAClB,OAAO,eACAmC,EAAqB9B,GAD5B,CAEIsF,OAAQ1D,EAAa5B,GACrBgG,SAAUzE,EAAQ5B,QAZC,SAAC0C,GAAD,MAA6C,CACpE4D,iBAAkB,SAAChE,EAAgBgC,EAAgBI,GAAjC,OAA0DhC,EDHhD,SAACJ,EAAgBgC,EAAgBI,GAAjC,OAAoD,SAAOhC,EAAoBC,GAA3B,qBAAAC,EAAAC,OAAA,mDAC1E5C,EAAQ0C,MACRT,EAAU4D,GAAoB7F,EAAOqE,EAAQI,IAF6B,uBAK5EhC,EAASyD,GAAkBjE,IALiD,qDAAAU,EAAA,MAUrDG,IAAMC,IAAN,UAAa3D,EAAb,kBAAkCiD,EAAlC,mCAAmEgC,EAAnE,mBAAoFI,KAV/B,uBAUpEtE,EAVoE,EAUpEA,KAVoE,kBAWrEsC,EAASyD,GAAkB/F,KAX0C,kCAa5E6C,QAAQxC,MAAR,MACAiC,EAhB4B,CAAExC,KtBCK,+BsBD8BC,QAAS,CAAEC,KAAM,MAEN,0DCGUkG,CAAiBhE,EAAQgC,EAAQI,KAC3HjC,QAAS,SAACF,GAAD,OAAcG,EAAcD,EAAQF,QAcnBuC,CAA6CE,gBCtBrD,SAAC,GAA2H,IAAD,IAAxHzF,YAAwH,MAAjHD,EAAYC,KAAqG,EAA/FC,EAA+F,EAA/FA,QAAS6G,EAAsF,EAAtFA,SAAU1E,EAA4E,EAA5EA,MAA4E,IAArEgE,cAAqE,MAA5DrG,EAAYG,MAAgD,EAAzC6G,EAAyC,EAAzCA,iBAAkB7D,EAAuB,EAAvBA,QAStH,OARAwC,qBAAU,WAAO,IAAD,EACwBtD,GAASA,EAAMkE,QAAW,GAAtDvD,EADI,EACJA,OAAQgC,EADJ,EACIA,OAAQI,EADZ,EACYA,OACpBpC,GAAUgC,GAAUI,IACpB4B,EAAiBhE,EAAQgC,EAAQI,GACjCjC,EAAQH,MAEb,CAACX,IAEI,kBAAC,WAAD,KACJ,kBAAC,GAAD,eACIpC,KAAI,UAAKA,EAAL,cAAe8G,GACnB7G,QAASA,GACLmG,SnBiHV,kBAAmBY,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBoBxHnB,IAAMC,GAAQjG,EAAe,CAAEZ,YAAa,KAC5C8G,iBACI,kBAAC,IAAD,CAAUD,MAAOA,IACb,kBAAC,IAAD,CAAiBnG,QAASA,GACtB,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUqG,KAAK,IAAIC,OAAK,EAACrC,GAAIjG,IAC7B,kBAAC,IAAD,CAAOsI,OAAK,EAACD,KAAMrI,EAAaoI,OAAQ,gBAAGnF,EAAH,EAAGA,MAAH,OAAgB,kBAAC+D,GAAD,CAAc/D,MAAOA,OAC7E,kBAAC,IAAD,CAAOqF,OAAK,EAACD,KAAMrI,EAAgBoI,OAAQ,gBAAGnF,EAAH,EAAGA,MAAH,OAAgB,kBAACyE,GAAD,CAAgBzE,MAAOA,OAClF,kBAAC,IAAD,CAAOmF,OAAQ,kBAAO,kBAAC,EAAD,aAKxCG,SAASC,eAAe,W","file":"static/js/main.635940a3.chunk.js","sourcesContent":["export const routes = {\n    defaultShowEndpoint: '/show/6771',\n    episode: '/show/:showId/episodes/:season/:number',\n    show: '/show/:showId',\n};\n","export const size = {\n    mobileS: '320px',\n    mobileM: '375px',\n    mobileL: '425px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n    desktop: '2560px'\n};\n\nexport const device = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`\n};","export const api = {\n  baseUrl: 'https://api.tvmaze.com',\n}\n\nexport const errorFiller = {\n  name: 'Not Found',\n  summary: '<p>We could not found a summary for this. <br /><b>Is it a new one?</b><br />Do not forget to notify TV Maze!</p>',\n  image: {\n    medium: 'https://static.tvmaze.com/images/no-img/no-img-portrait-text.png',\n    original: 'https://static.tvmaze.com/images/no-img/no-img-portrait-text.png',\n  }\n}\n\nexport const fetchingShowData = {\n  name: 'Loading...',\n  summary: undefined,\n  image: {},\n}\n","import { FETCHED_SHOW_DETAILS, SHOW_DETAILS_FETCH_FAILED } from \"../../constants\";\n\nconst initialState = {\n    name: undefined,\n    description: undefined,\n};\n\nexport const currentShow = (state = {...initialState}, { type, payload }) => {\n    switch (type) {\n        case FETCHED_SHOW_DETAILS:\n            return { ...state, ...payload.data };\n        case SHOW_DETAILS_FETCH_FAILED:\n            return { ...state, ...payload.data };\n        default:\n            return state;\n    }\n}","export const FETCHED_SHOW_DETAILS = '@SHOW/FETCHED_DETAILS';\nexport const SHOW_DETAILS_FETCH_FAILED = '@SHOW/DETAILS_FETCH_FAILED';\n\nexport const FETCHED_EPISODE_DETAILS = '@EPISODE/FETCHED_DETAILS';\nexport const EPISODE_DETAILS_FETCH_FAILED = '@EPISODE/DETAILS_FETCH_FAILED';\nexport const FETCHING_EPISODE_DETAILS = '@EPISODE/FETCHING_DETAILS';\n\nexport const FETCHED_EPISODE_DETAILS_INFO = '@EPISODE/DETAILS_INFO_FETCHED';\nexport const FAILED_EPISODE_DETAILS_INFO = '@EPISODE/DETAILS_INFO_FAILED';","import { FETCHED_EPISODE_DETAILS, EPISODE_DETAILS_FETCH_FAILED, FETCHING_EPISODE_DETAILS, FETCHED_EPISODE_DETAILS_INFO, FAILED_EPISODE_DETAILS_INFO } from \"../../constants\";\n\nconst initialState = {\n    episodes: undefined,\n    fetchingEpisodes: false,\n    current: undefined,\n};\n\nexport const episodes = (state = { ...initialState }, { type, payload }) => {\n    switch (type) {\n        case FETCHED_EPISODE_DETAILS:\n            return { ...state, episodes: payload.data, fetchingEpisodes: false };\n        case EPISODE_DETAILS_FETCH_FAILED:\n            return { ...state, episodes: payload.data, fetchingEpisodes: false };\n        case FETCHING_EPISODE_DETAILS:\n            return { ...state, fetchingEpisodes: true };\n        case FETCHED_EPISODE_DETAILS_INFO:\n            return { ...state, currentEpisode: payload };\n        case FAILED_EPISODE_DETAILS_INFO:\n            return { ...state, error: payload };\n        default:\n            return state;\n    }\n}","import { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createRootReducer } from './rootReducer';\n\nexport const history = createBrowserHistory();\n\nconst configureStore = (preloadedState) => {\n  const store = createStore(\n    createRootReducer(history),\n    preloadedState,\n    composeWithDevTools(\n      applyMiddleware(\n        routerMiddleware(history),\n        thunk,\n      ),\n    ),\n  );\n\n  return store;\n}\n\nexport default configureStore;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { currentShow, episodes } from './reducers';\n\nexport const createRootReducer = (history) => combineReducers({\n  router: connectRouter(history),\n  currentShow,\n  episodes,\n});\n","import React from 'react';\n\nexport const NotFound = () => (<div>Bummer!! We could not find this page</div>);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createSelector } from 'reselect';\n\nexport const getName = createSelector(currentShow => currentShow && currentShow.name, name => name);\n\nexport const getSummary = createSelector(\n    currentShow => currentShow && currentShow.summary,\n    summary => summary,\n);\n\nexport const getCoverLinks = createSelector(\n    currentShow => currentShow && currentShow.image,\n    items => ({\n        original: items && items.original,\n        medium: items && items.medium,\n    }),\n);\n","import { createSelector } from 'reselect';\nimport { errorFiller } from '../constants';\n\nexport const selectCovers = createSelector(\n  episodes => episodes.currentEpisode,\n  episode => ({\n    original: (episode && episode.image && episode.image.original) || errorFiller.image.original,\n    medium: (episode && episode.image && episode.image.medium) || errorFiller.image.medium,\n  }),\n);\n\nexport const selectCurrentEpisode = createSelector(\n  episodes => episodes.currentEpisode,\n  (episode) => {\n    if (!episode) return null;\n\n    return {\n      name: episode.name,\n      summary: episode.summary || errorFiller.summary,\n      airdate: episode.airdate,\n    };\n  },\n);\n","export const isShowAvailable = (showId: string, currentShow) => currentShow.id === showId;\n","import { Dispatch } from \"redux\";\nimport axios from 'axios';\nimport { isShowAvailable } from \"./show.helpers\";\nimport { api, FETCHED_SHOW_DETAILS, SHOW_DETAILS_FETCH_FAILED, errorFiller, fetchingShowData } from \"../../constants\";\n\nconst addShowDetails = (data) => ({ type: FETCHED_SHOW_DETAILS, payload: { data } });\n\nconst addShowDetailsFailed = () => ({ type: SHOW_DETAILS_FETCH_FAILED, payload: { data: errorFiller } });\n\nexport const getShow = (id: string) => async (dispatch: Dispatch, getState) => {\n    const presentState = getState();\n    if (presentState) {\n        const { currentShow } = presentState;\n        if (currentShow && isShowAvailable(id, currentShow)) {\n            return;\n        }\n    }\n    dispatch(addShowDetails(fetchingShowData));\n    try {\n        const { data } = await axios.get(`${api.baseUrl}/shows/${id}`);\n        return dispatch(addShowDetails(data));\n    } catch (error) {\n        console.error(error);\n        return dispatch(addShowDetailsFailed());\n    }\n};","import styled from 'styled-components';\nimport { device, size } from '../../constants';\n\nexport const StyledContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-width: ${size.laptop};\n    margin: 0 auto;\n`;\n\nexport const StyledHeader = styled.h2`\n    color: #3C948B;\n    text-align: center;\n`;\n\nexport const StyledContent = styled.div`\n    display: block;\n    font-size: 1rem;\n    @media ${device.tablet} {\n        font-size: 1.5rem;\n        display: flex;\n    }\n`;\n\nexport const StyledCoverImageMedium = styled.img`\nmax-height: 350px;\ndisplay: block;\n@media ${device.tablet} {\n    display: none;\n}`;\n\nexport const StyledCoverImageLarge = styled.img`\nmax-width: 350px;\ndisplay: none;\n@media ${device.tablet} {\n    display: block;\n}`;","import styled from \"styled-components\";\n\nexport const Item = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 0.5rem;\n`;\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(\n    ${({ numberOfColumns = 2 }: { numberOfColumns: number }) => numberOfColumns},\n    1fr\n  );\n`;\n","import React, { Fragment } from 'react';\nimport { StyledContainer, StyledHeader, StyledContent, StyledCoverImageMedium, StyledCoverImageLarge } from './showDetail.style';\nimport { IShowDetail } from './showDetail.interface';\nimport { Grid, Item } from '../Grid';\n\nexport const ShowDetail = ({ name, summary, medium, original }: IShowDetail) => (<Fragment>\n    <StyledContainer>\n        <StyledHeader>{name}</StyledHeader>\n        <Grid numberOfColumns={2}>\n            <Item>\n                {/* \n                // @ts-ignore */}\n                <StyledCoverImageMedium src={medium} />\n                                {/* \n                // @ts-ignore */}\n                <StyledCoverImageLarge src={original} />\n            </Item>\n            <Item>\n                <StyledContent dangerouslySetInnerHTML={{ __html: summary }} />\n            </Item>\n        </Grid>\n    </StyledContainer>\n</Fragment>);\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalTableStyle = createGlobalStyle`\n  a {\n    color: #3C948B;\n    cursor: pointer;\n  }\n  table {\n  width: 100%;\n  border-collapse: collapse;\n  h2 {\n    width: 100%;\n  }\n  th,\n  td {\n    border-collapse: collapse;\n  }\n  th,\n  td,\n  tr {\n    padding: 5px;\n  }\n  th, td {\n    text-align: center;\n    border: 1px solid #ddd;\n    padding: 8px;  \n  }\n  th {\n    background: #3C948B;\n    color: #fff;\n  }\n  tr:nth-child(even) {\n    background-color:rgb(241, 241, 241);\n  }\n  tr:hover {\n    background-color: #ddd;\n  }\n  td:first-child {\n    width: 10%;\n  }\n  td:nth-child(2) {\n    width: 20%;\n  }\n  }\n`;","import React from 'react';\nimport { map, isEmpty } from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { StyledContainer, StyledHeader } from '../ShowDetail';\nimport { IEpisode } from './episode.interface';\n\nexport const EpisodeTable = ({ episodes, showId }: IEpisode): JSX.Element => (<StyledContainer>\n    {episodes && !isEmpty(episodes) && <StyledHeader>Season {episodes[0].season}</StyledHeader>}\n    <table>\n        <tbody>\n            <tr className=\"hidden\">\n                <th>Number</th>\n                <th>Date</th>\n                <th>Name</th>\n            </tr>\n            {map(episodes, episode => (\n                <tr key={episode.id}>\n                    {episode.number && <td>{episode.number}</td>}\n                    {episode.airdate && <td>{episode.airdate}</td>}\n                    {episode.name && <td><Link to={`/show/${showId}/episodes/${episode.season}/${episode.number}`}>{episode.name}</Link></td>}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n</StyledContainer>);\n","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { api, FETCHED_EPISODE_DETAILS, EPISODE_DETAILS_FETCH_FAILED, FETCHING_EPISODE_DETAILS, errorFiller } from '../../constants';\n\nconst fetchingEpisodes = () => ({ type: FETCHING_EPISODE_DETAILS });\n\nconst addEpisodes = (data) => ({ type: FETCHED_EPISODE_DETAILS, payload: { data } });\n\nconst addEpisodesFailed = () => ({ type: EPISODE_DETAILS_FETCH_FAILED, payload: { data: errorFiller } });\n\nexport const getEpisodes = (showId: string) => async (dispatch: Dispatch) => {\n    dispatch(fetchingEpisodes());\n    try {\n        const { data } = await axios.get(`${api.baseUrl}/shows/${showId}/episodes`);\n        return dispatch(addEpisodes(data));\n    } catch (error) {\n        console.error(error);\n        return dispatch(addEpisodesFailed());\n    }\n};\n","import { connect } from 'react-redux';\nimport { Episode } from './episode';\nimport { getEpisodes } from './episode.actions';\nimport { memo } from 'react';\nimport { Dispatch } from 'redux';\nimport { IEpisodes } from './episode.interface';\n\ntype DispatchToPropsMap = Pick<IEpisodes, 'getEpisodes'>;\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsMap => ({\n    getEpisodes: (id): void => dispatch<any>(getEpisodes(id)),\n});\n\ntype StateToPropsMap = Pick<IEpisodes, 'episodes'>;\n\nconst mapStateToProps = (state: StateToPropsMap): StateToPropsMap => {\n    const { episodes } = state;\n    return {\n        episodes,\n    }\n}\n\nexport const MemoizedEpisode = connect(mapStateToProps, mapDispatchToProps)(memo(Episode));\n","import React, { Fragment, useEffect } from 'react';\nimport { map, values } from 'lodash';\nimport { getEpisodeList } from './episode.helpers';\nimport { EpisodeTable } from './episodeTable';\nimport { IEpisodes } from './episode.interface';\n\nexport const Episode = ({ showId, getEpisodes, episodes }: IEpisodes): JSX.Element => {\n    useEffect(() => {\n        if (showId) {\n            getEpisodes(showId);\n        }\n    }, [showId, getEpisodes]);\n\n    return (<Fragment>\n        {episodes && episodes.episodes\n            && !episodes.fetchingEpisodes\n            && map(values(getEpisodeList(episodes.episodes)), (episodesInList, itr) => (<EpisodeTable showId={showId} key={itr} episodes={episodesInList} />))}\n    </Fragment>);\n}","import { reverse, values } from 'lodash';\n\nexport const getEpisodeList = (episodes) => reverse(values(episodes.reduce((episodeList, episode) => {\n    if (!episodeList[episode.season]) {\n        episodeList[episode.season] = [];\n    }\n    episodeList[episode.season].push(episode);\n    return episodeList;\n}, {})));\n","import { memo } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getName, getCoverLinks, getSummary } from '../../selectors';\nimport { IShow } from './show.interface';\nimport { getShow } from './show.actions';\nimport { Show } from './show';\n\ntype StateToPropsMap = Pick<IShow, 'name' | 'summary' | 'covers'>;\n\nconst mapStateToProps = (state): StateToPropsMap  => {\n    const { currentShow } = state;\n    const name = getName(currentShow);\n    const summary = getSummary(currentShow);\n    const covers = getCoverLinks(currentShow);\n    return {\n        name,\n        summary,\n        covers,\n    }\n};\n\ntype DispatchToPropsMap = Pick<IShow, 'getShowDetails'>;\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsMap => ({\n    getShowDetails: (id: string): void => dispatch<any>(getShow(id)),\n});\n\nexport const MemoizedShow = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(memo(Show));","import React, { useEffect, Fragment } from \"react\";\nimport { IShow } from \"./show.interface\";\nimport { ShowDetail } from \"../ShowDetail\";\nimport { GlobalTableStyle } from \"./show.style\";\nimport { MemoizedEpisode } from \"../Episode\";\n\nexport const Show = ({ covers, summary, getShowDetails, match, name }: IShow) => {\n    const showId = match && match.params && match.params.showId;\n\n    useEffect(() => {\n        if (getShowDetails) {\n            getShowDetails(showId);\n        }\n    }, [getShowDetails, showId]);\n\n    return (<Fragment>\n        <GlobalTableStyle />\n        <ShowDetail\n            name={name}\n            summary={summary}\n            {...covers}\n        />\n        <MemoizedEpisode showId={showId} />\n    </Fragment>);\n};\n","\nexport const getEpisodeFromStore = (state, season, number) => {\n    const episodesList = state && state.episodes;\n    const episodes = episodesList && episodesList.episodes;\n  \n    if (!Array.isArray(episodes)) return null;\n  \n    return episodes.find(episode => episode.season === (season + 1) && episode.number === (number + 1));\n  };\n  ","import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { api, FETCHED_EPISODE_DETAILS_INFO, FAILED_EPISODE_DETAILS_INFO } from '../../constants';\nimport { getEpisodeFromStore } from './detail.helpers';\n\nconst getEpisodeDetails = (data) => ({ type: FETCHED_EPISODE_DETAILS_INFO, payload: data });\n\nconst episodeDetailsFailed = () => ({ type: FAILED_EPISODE_DETAILS_INFO, payload: { data: '' } });\n\nexport const getSeasonEpisode = (showId: string, season: number, number: number) => async (dispatch: Dispatch, getState) => {\n    const state = getState();\n    const episode = getEpisodeFromStore(state, season, number);\n\n    if (episode) {\n        dispatch(getEpisodeDetails(episode));\n        return;\n    }\n    \n    try {\n        const { data } = await axios.get(`${api.baseUrl}/shows/${showId}/episodebynumber?season=${season}&number=${number}`);\n        return dispatch(getEpisodeDetails(data));\n    } catch (error) {\n        console.error(error);\n        dispatch(episodeDetailsFailed());\n    }\n}\n","import { connect } from 'react-redux';\nimport { memo } from 'react';\nimport { getShow } from '../Show/show.actions';\nimport { getName, selectCurrentEpisode, selectCovers } from '../../selectors';\nimport { Detail } from './detail';\nimport { getSeasonEpisode } from './detail.actions';\nimport { IDetail } from './detail.interface';\nimport { Dispatch } from 'redux';\n\ntype DispatchToPropsMap = Pick<IDetail, 'getShow' | 'getSeasonEpisode'>;\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchToPropsMap => ({\n    getSeasonEpisode: (showId: string, season: number, number: number): void => dispatch<any>(getSeasonEpisode(showId, season, number)),\n    getShow: (id): void => dispatch<any>(getShow(id)),\n});\n\ntype StateToPropsMap = Pick<IDetail, 'covers' | 'showName'>;\n\nconst mapStateToProps = (state): StateToPropsMap => {\n    const { episodes, currentShow } = state;\n    return {\n        ...selectCurrentEpisode(episodes),\n        covers: selectCovers(episodes),\n        showName: getName(currentShow),\n    }\n}\n\nexport const MemoizedDetail = connect(mapStateToProps, mapDispatchToProps)(memo(Detail));\n  ","import React, { Fragment, useEffect } from 'react';\nimport { IDetail } from './detail.interface';\nimport { ShowDetail } from '../ShowDetail';\nimport { errorFiller } from '../../constants';\n\nexport const Detail = ({ name = errorFiller.name, summary, showName, match, covers = errorFiller.image, getSeasonEpisode, getShow }: IDetail) => {\n    useEffect(() => {\n        const { showId, season, number } = (match && match.params) || {};\n        if (showId && season && number) {\n            getSeasonEpisode(showId, season, number);\n            getShow(showId);\n          }      \n    }, [match]);\n\n    return (<Fragment>\n        <ShowDetail\n            name={`${name} - ${showName}`}\n            summary={summary}\n            {...covers}\n        />\n    </Fragment>);\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { ConnectedRouter } from 'connected-react-router';\nimport configureStore, { history } from './store';\nimport { NotFound } from './views';\nimport * as serviceWorker from './serviceWorker';\nimport { routes } from './constants';\nimport { MemoizedDetail, MemoizedShow } from './components';\n\nserviceWorker.unregister();\n\nconst store = configureStore({ currentShow: {} });\nrender(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <>\n                <Switch>\n                    <Redirect path=\"/\" exact to={routes.defaultShowEndpoint} />\n                    <Route exact path={routes.show} render={({ match }) => (<MemoizedShow match={match} />)} />\n                    <Route exact path={routes.episode} render={({ match }) => (<MemoizedDetail match={match} />)} />\n                    <Route render={() => (<NotFound />)} />\n                </Switch>\n            </>\n        </ConnectedRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}